package com.example.Cracking.BinarySearch;import java.util.ArrayList;public class BinarySearch {    public static boolean binarySearch(ArrayList<Integer> arrayList, int data) throws Exception {        int start = 0;        int end = arrayList.size() - 1;        if (arrayList.isEmpty()) {            throw new Exception("No element");        } else {            while (start < end) {                int midIndex = (start + end) / 2;                if (arrayList.get(midIndex) < data) {                    start = midIndex + 1;                } else {                    end = midIndex;                }            }            return arrayList.get(start) == data || arrayList.get(end) == data;        }    }    public static int binarySearchFirstIndex(ArrayList<Integer> arrayList, int data) throws Exception {        int start = 0;        int end = arrayList.size() - 1;        if (arrayList.isEmpty()) {            throw new Exception("No element");        } else if (arrayList.size() == 1) {            return arrayList.get(0) == data ? 1 : 0;        } else {            while (start < end) {                int midIndex = (start + end) / 2;                if (arrayList.get(midIndex) < data) {                    start = midIndex + 1;                } else if (arrayList.get(midIndex) > data) {                    end = midIndex - 1;                } else {                    if (midIndex != 0 || midIndex != arrayList.size() - 1) {                        if (arrayList.get(midIndex - 1) != data) {                            return midIndex;                        } else {                            end = midIndex - 1;                        }                    } else {                        return midIndex;                    }                }            }            return (arrayList.get(start) == data) ? start : -1;        }    }    public static int binarySearchLastIndex(ArrayList<Integer> arrayList, int data) throws Exception {        int start = 0;        int end = arrayList.size() - 1;        if (arrayList.isEmpty()) {            throw new Exception("No element");        } else if (arrayList.size() == 1) {            return arrayList.get(0) == data ? 1 : 0;        } else {            while (start < end) {                int midIndex = (start + end) / 2;                if (arrayList.get(midIndex) < data) {                    start = midIndex + 1;                } else if (arrayList.get(midIndex) > data) {                    end = midIndex - 1;                } else {                    if (midIndex + 1 != 0 || midIndex + 1 != arrayList.size() - 1) {                        if (arrayList.get(midIndex + 1) != data) {                            return midIndex;                        } else {                            start = midIndex + 1;                        }                    } else {                        return midIndex;                    }                }            }            return (arrayList.get(start) == data) ? start : -1;        }    }    public static int binarySearchMaxOccurence(ArrayList<Integer> arrayList, int data) throws Exception {        return binarySearchLastIndex(arrayList, data) - binarySearchFirstIndex(arrayList, data) + 1;    }        public static boolean binarySearchIterative (ArrayList < Integer > arrayList,int data) throws Exception {            int start = 0;            int end = arrayList.size() - 1;            if (arrayList.isEmpty()) {                throw new Exception("No element");            } else if (arrayList.size() == 1) {                return arrayList.get(0) == data;            } else {                int midIndex = (start + end) / 2;                ArrayList<Integer> integerArrayListArrayList = new ArrayList<>(arrayList);                while (midIndex != start) {                    if (arrayList.get(midIndex) == data) {                        return true;                    } else if (arrayList.get(midIndex) > data) {                        end = midIndex;                        midIndex = (start + end) / 2;                    } else {                        start = midIndex;                        midIndex = (start + end) / 2;                    }                }            }            return arrayList.get(end) == data;        }    }